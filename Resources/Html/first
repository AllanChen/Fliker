//
//  ViewController.m
//  Filker
//
//  Created by ChanAllan on 3/18/15.
//  Copyright (c) 2015 ChanAllan. All rights reserved.
//
#import <AVFoundation/AVFoundation.h>
#import "ViewController.h"
#import "BinaryArray.h"
@import GLKit;

@interface ViewController ()
@property (nonatomic)NSInteger changePoint;
@property (nonatomic, strong)NSTimer *timer;
@property (nonatomic, retain)EAGLContext *context;
@property (nonatomic, retain)GLKBaseEffect *effect;
@property (nonatomic, retain)OpenGLView *openGLV;
@property (nonatomic, retain)NSString *binaryString;
@property (nonatomic, retain)NSMutableArray *binaryArray;
@property (nonatomic, copy)NSString *inputString;
@property (nonatomic, retain)UIWebView *jsCodeWebView;
@end

@implementation ViewController
@synthesize timer = _timer;
@synthesize changePoint;
@synthesize binaryString = _binaryString;
@synthesize binaryArray = _binaryArray;
@synthesize inputString = _inputString;
@synthesize jsCodeWebView = _jsCodeWebView;
- (void)viewDidLoad {
    [super viewDidLoad];
    [self passValueToJS];
}

- (void)passValueToJS{
    NSString *path;
    NSBundle *thisBundle = [NSBundle mainBundle];
    path = [thisBundle pathForResource:@"pVar" ofType:@"html"];
    NSURL *instructionsURL = [NSURL fileURLWithPath:path];
    
    _jsCodeWebView = [UIWebView new];
    [_jsCodeWebView setDelegate:self];
    NSString* htmlString = [NSString stringWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];
    [_jsCodeWebView loadHTMLString:htmlString baseURL:instructionsURL];
    [self.view addSubview:_jsCodeWebView];
}



- (IBAction)flashPress:(id)sender{
    
    /*
    _timer = [NSTimer scheduledTimerWithTimeInterval:0.01
                                              target:self
                                            selector:@selector(timerTest)  userInfo:nil
                                             repeats:YES];
     */
    
    NSString * jsCallBack = [NSString stringWithFormat:@"myFunction('%@')",self.keyTxt.text];
    _inputString = [_jsCodeWebView stringByEvaluatingJavaScriptFromString:jsCallBack];
    //NSLog(@"%@",_inputString);
    
    _binaryArray = [[NSMutableArray alloc] init];
    for (int i = 0; i < [_inputString length]; i++) {
        NSLog(@"%C",[_inputString characterAtIndex:i]);
        [_binaryArray addObject:[NSString stringWithFormat:@"%C", [_inputString characterAtIndex:i]]];
    }
    NSLog(@"%@",_binaryArray);
    
    _timer = [NSTimer scheduledTimerWithTimeInterval:0.01
                                              target:self
                                            selector:@selector(timerTest)  userInfo:nil
                                             repeats:YES];
}

- (void)timerTest{
    
    AVCaptureDevice *flashLight = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
    if ([flashLight isTorchAvailable] && [flashLight isTorchModeSupported:AVCaptureTorchModeOn])
    {
        [flashLight lockForConfiguration:nil];
        
        
        if (flashLight.torchMode == AVCaptureTorchModeOff) {
            [flashLight setTorchMode:AVCaptureTorchModeOn];
        }
        
        else {
            [flashLight setTorchMode:AVCaptureTorchModeOff];
        }
    }
}

- (IBAction)stopFlash:(id)sender{
    AVCaptureDevice *flashLight = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
    if ([flashLight isTorchAvailable] && [flashLight isTorchModeSupported:AVCaptureTorchModeOn])
    {
        [flashLight lockForConfiguration:nil];
        [flashLight setTorchMode:AVCaptureTorchModeOff];
        [flashLight setFlashMode:AVCaptureFlashModeOff];
    }
    [_timer invalidate];
}








-(void)initView
{
    /*
     _openGLV = [[OpenGLView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 400)];
     [self.view addSubview:_openGLV];
     _binaryArray = [[NSMutableArray alloc] init];
     UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]
     initWithTarget:self
     action:@selector(dismissKeyboard)];
     
     [self.view addGestureRecognizer:tap];
     */
    NSString *hex = @"123456";
    NSUInteger hexAsInt;
    [[NSScanner scannerWithString:hex] scanHexInt:&hexAsInt];
    NSString *binary = [NSString stringWithFormat:@"%@", [self toBinary:hexAsInt]];
    NSLog(@"%@",binary);
}



-(NSString *)toBinary:(NSUInteger)input
{
    if (input == 1 || input == 0)
        return [NSString stringWithFormat:@"%lu", (unsigned long)input];
    return [NSString stringWithFormat:@"%@%lu", [self toBinary:input / 2], input % 2];
}

-(void)dismissKeyboard {
    [self.keyTxt resignFirstResponder];
}

-(void)backgroundColor
{
    if (changePoint == [_binaryArray count])
    {
        [_timer invalidate];
    }
    else
    {
        if ([[_binaryArray objectAtIndex:changePoint] integerValue] == 0)
            _openGLV.bg = 0.0;
        else
            _openGLV.bg = 1.0;
        
        [_openGLV layoutSubviews];
        changePoint++;
    }
}

-(IBAction)beginPress:(id)sender
{
    changePoint = 0;
    _timer = [NSTimer scheduledTimerWithTimeInterval:0.01
                                              target:self
                                            selector:@selector(backgroundColor)  userInfo:nil
                                             repeats:YES];
    
    if ([self.keyTxt.text length]>0) {
        _binaryString = [self stringToBinary:self.keyTxt.text];
        for (int i = 0; i < [_binaryString length]; i++) {
            [_binaryArray addObject:[NSString stringWithFormat:@"%C", [_binaryString characterAtIndex:i]]];
        }
        NSLog(@"%@",_binaryString);
    }
}

-(NSString *)stringToBinary:(NSString *)inputSting
{
    BinaryArray *binaryBuffer = [BinaryArray sharedInstance];
    NSString *string2 = [[NSString alloc] init];
    for (int i=0; i<[inputSting length]; i++) {
        string2 = [string2 stringByAppendingString:[[binaryBuffer binary] objectAtIndex:[inputSting characterAtIndex:i]]];
    }
    return string2;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    
}

@end
